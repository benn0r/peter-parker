
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001b  00800060  00800060  0000063c  2**0
                  ALLOC
  2 .debug_aranges 00000100  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000252  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008fd  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000536  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007ec  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001d0  00000000  00000000  00001fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002fa  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000247  00000000  00000000  0000247a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	33 c1       	rjmp	.+614    	; 0x26c <__vector_2>
   6:	04 c1       	rjmp	.+520    	; 0x210 <__vector_3>
   8:	b7 c0       	rjmp	.+366    	; 0x178 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	3e c1       	rjmp	.+636    	; 0x29a <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ec       	ldi	r30, 0xC8	; 200
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 37       	cpi	r26, 0x7B	; 123
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	28 d0       	rcall	.+80     	; 0xaa <main>
  5a:	b4 c2       	rjmp	.+1384   	; 0x5c4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <LineLeft>:
unsigned int lineData[2];
int ADOffset;

void LineLeft (void)
{
  speedLeft  += 1;      /* links mehr Gas geben */
  5e:	80 91 62 00 	lds	r24, 0x0062
  62:	90 91 63 00 	lds	r25, 0x0063
  66:	01 96       	adiw	r24, 0x01	; 1
  68:	90 93 63 00 	sts	0x0063, r25
  6c:	80 93 62 00 	sts	0x0062, r24
  if (speedLeft > 0xFE) speedLeft = 0xFF;
  70:	8f 3f       	cpi	r24, 0xFF	; 255
  72:	91 05       	cpc	r25, r1
  74:	34 f0       	brlt	.+12     	; 0x82 <LineLeft+0x24>
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	90 93 63 00 	sts	0x0063, r25
  7e:	80 93 62 00 	sts	0x0062, r24
  82:	08 95       	ret

00000084 <LineRight>:
}

void LineRight (void)
{
  speedRight  += 1;     /* rechts mehr Gas geben */
  84:	80 91 60 00 	lds	r24, 0x0060
  88:	90 91 61 00 	lds	r25, 0x0061
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	90 93 61 00 	sts	0x0061, r25
  92:	80 93 60 00 	sts	0x0060, r24
  if (speedRight > 0xFE) speedRight = 0xFF;
  96:	8f 3f       	cpi	r24, 0xFF	; 255
  98:	91 05       	cpc	r25, r1
  9a:	34 f0       	brlt	.+12     	; 0xa8 <LineRight+0x24>
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 61 00 	sts	0x0061, r25
  a4:	80 93 60 00 	sts	0x0060, r24
  a8:	08 95       	ret

000000aa <main>:
}

int main(void)
{
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  int i;
  unsigned char j;

  Init();
  b0:	21 d1       	rcall	.+578    	; 0x2f4 <Init>

  FrontLED(ON);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	e1 d1       	rcall	.+962    	; 0x478 <FrontLED>
  b6:	10 e0       	ldi	r17, 0x00	; 0
  for (j = 0; j < 0xFF; j++) LineData(lineData);
  b8:	86 e6       	ldi	r24, 0x66	; 102
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	7b d1       	rcall	.+758    	; 0x3b4 <LineData>
  be:	1f 5f       	subi	r17, 0xFF	; 255
  c0:	1f 3f       	cpi	r17, 0xFF	; 255
  c2:	d1 f7       	brne	.-12     	; 0xb8 <main+0xe>
  LineData(lineData);
  c4:	86 e6       	ldi	r24, 0x66	; 102
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	75 d1       	rcall	.+746    	; 0x3b4 <LineData>
  ADOffset = lineData[LEFT] - lineData[RIGHT];
  ca:	80 91 66 00 	lds	r24, 0x0066
  ce:	90 91 67 00 	lds	r25, 0x0067
  d2:	20 91 68 00 	lds	r18, 0x0068
  d6:	30 91 69 00 	lds	r19, 0x0069
  da:	82 1b       	sub	r24, r18
  dc:	93 0b       	sbc	r25, r19
  de:	90 93 65 00 	sts	0x0065, r25
  e2:	80 93 64 00 	sts	0x0064, r24
  speedLeft = speedRight = SPEED;
  e6:	8f e8       	ldi	r24, 0x8F	; 143
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 61 00 	sts	0x0061, r25
  ee:	80 93 60 00 	sts	0x0060, r24
  f2:	90 93 63 00 	sts	0x0063, r25
  f6:	80 93 62 00 	sts	0x0062, r24
		speedLeft = speedRight = 0;
    }
    else
    {
      StatusLED(OFF);
      speedLeft = speedRight = SPEED;
  fa:	cf e8       	ldi	r28, 0x8F	; 143
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  LineData(lineData);
  ADOffset = lineData[LEFT] - lineData[RIGHT];
  speedLeft = speedRight = SPEED;
  for (;;)
  {
    LineData(lineData);
  fe:	86 e6       	ldi	r24, 0x66	; 102
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	58 d1       	rcall	.+688    	; 0x3b4 <LineData>
    i = (lineData[LEFT] - lineData[RIGHT]) - ADOffset;
 104:	20 91 66 00 	lds	r18, 0x0066
 108:	30 91 67 00 	lds	r19, 0x0067
 10c:	80 91 68 00 	lds	r24, 0x0068
 110:	90 91 69 00 	lds	r25, 0x0069
 114:	28 1b       	sub	r18, r24
 116:	39 0b       	sbc	r19, r25
 118:	80 91 64 00 	lds	r24, 0x0064
 11c:	90 91 65 00 	lds	r25, 0x0065
 120:	28 1b       	sub	r18, r24
 122:	39 0b       	sbc	r19, r25
    if ( i > 4)
 124:	25 30       	cpi	r18, 0x05	; 5
 126:	31 05       	cpc	r19, r1
 128:	34 f0       	brlt	.+12     	; 0x136 <main+0x8c>
    {
		StatusLED(GREEN);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	92 d1       	rcall	.+804    	; 0x452 <StatusLED>
		SetMotorPower(60, 60);
 12e:	8c e3       	ldi	r24, 0x3C	; 60
 130:	6c e3       	ldi	r22, 0x3C	; 60
 132:	be d1       	rcall	.+892    	; 0x4b0 <SetMotorPower>
 134:	13 c0       	rjmp	.+38     	; 0x15c <main+0xb2>
		speedLeft = speedRight = SPEED;
    }
    else if ( i < -4)
 136:	2c 5f       	subi	r18, 0xFC	; 252
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	74 f4       	brge	.+28     	; 0x158 <main+0xae>
    {
		StatusLED(RED);
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	89 d1       	rcall	.+786    	; 0x452 <StatusLED>
		SetMotorPower(0, 0);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	b5 d1       	rcall	.+874    	; 0x4b0 <SetMotorPower>
		speedLeft = speedRight = 0;
 146:	10 92 61 00 	sts	0x0061, r1
 14a:	10 92 60 00 	sts	0x0060, r1
 14e:	10 92 63 00 	sts	0x0063, r1
 152:	10 92 62 00 	sts	0x0062, r1
 156:	0a c0       	rjmp	.+20     	; 0x16c <main+0xc2>
    }
    else
    {
      StatusLED(OFF);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	7b d1       	rcall	.+758    	; 0x452 <StatusLED>
      speedLeft = speedRight = SPEED;
 15c:	d0 93 61 00 	sts	0x0061, r29
 160:	c0 93 60 00 	sts	0x0060, r28
 164:	d0 93 63 00 	sts	0x0063, r29
 168:	c0 93 62 00 	sts	0x0062, r28
    }
    MotorSpeed(speedLeft, speedRight);
 16c:	80 91 62 00 	lds	r24, 0x0062
 170:	60 91 60 00 	lds	r22, 0x0060
 174:	c2 d1       	rcall	.+900    	; 0x4fa <MotorSpeed>
 176:	c3 cf       	rjmp	.-122    	; 0xfe <main+0x54>

00000178 <__vector_4>:

  \par  Beispiel:
  (Nicht vorhanden)
*****************************************************************************/
SIGNAL (SIG_OVERFLOW2)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
  TCNT2 += 0x25;
 19a:	84 b5       	in	r24, 0x24	; 36
 19c:	8b 5d       	subi	r24, 0xDB	; 219
 19e:	84 bd       	out	0x24, r24	; 36
  count36kHz ++;
 1a0:	80 91 74 00 	lds	r24, 0x0074
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	80 93 74 00 	sts	0x0074, r24
  if (!count36kHz)
 1aa:	80 91 74 00 	lds	r24, 0x0074
 1ae:	88 23       	and	r24, r24
 1b0:	99 f4       	brne	.+38     	; 0x1d8 <__vector_4+0x60>
    timebase ++;
 1b2:	80 91 77 00 	lds	r24, 0x0077
 1b6:	90 91 78 00 	lds	r25, 0x0078
 1ba:	a0 91 79 00 	lds	r26, 0x0079
 1be:	b0 91 7a 00 	lds	r27, 0x007A
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	a1 1d       	adc	r26, r1
 1c6:	b1 1d       	adc	r27, r1
 1c8:	80 93 77 00 	sts	0x0077, r24
 1cc:	90 93 78 00 	sts	0x0078, r25
 1d0:	a0 93 79 00 	sts	0x0079, r26
 1d4:	b0 93 7a 00 	sts	0x007A, r27
  if (Ovr2IntFunc)
 1d8:	80 91 75 00 	lds	r24, 0x0075
 1dc:	90 91 76 00 	lds	r25, 0x0076
 1e0:	89 2b       	or	r24, r25
 1e2:	29 f0       	breq	.+10     	; 0x1ee <__vector_4+0x76>
    Ovr2IntFunc();
 1e4:	e0 91 75 00 	lds	r30, 0x0075
 1e8:	f0 91 76 00 	lds	r31, 0x0076
 1ec:	09 95       	icall
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_3>:
#if defined(__AVR_ATmega168__)
SIGNAL(SIG_OUTPUT_COMPARE2A)
#else
SIGNAL(SIG_OUTPUT_COMPARE2) 
#endif
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
	count36kHz++;
 222:	80 91 74 00 	lds	r24, 0x0074
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 74 00 	sts	0x0074, r24
  if (!count36kHz)
 22c:	80 91 74 00 	lds	r24, 0x0074
 230:	88 23       	and	r24, r24
 232:	99 f4       	brne	.+38     	; 0x25a <__vector_3+0x4a>
    timebase ++;
 234:	80 91 77 00 	lds	r24, 0x0077
 238:	90 91 78 00 	lds	r25, 0x0078
 23c:	a0 91 79 00 	lds	r26, 0x0079
 240:	b0 91 7a 00 	lds	r27, 0x007A
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	a1 1d       	adc	r26, r1
 248:	b1 1d       	adc	r27, r1
 24a:	80 93 77 00 	sts	0x0077, r24
 24e:	90 93 78 00 	sts	0x0078, r25
 252:	a0 93 79 00 	sts	0x0079, r26
 256:	b0 93 7a 00 	sts	0x007A, r27
}
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_2>:

  \par  Beispiel:
  (Nicht vorhanden)
*****************************************************************************/
SIGNAL (SIG_INTERRUPT1)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
  switched = 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	90 93 6b 00 	sts	0x006B, r25
 282:	80 93 6a 00 	sts	0x006A, r24
#if defined(__AVR_ATmega168__)
  EIMSK &= ~_BV(INT1);                // Externen Interrupt 1 sperren
#else
  GICR &= ~_BV(INT1);                 // Externen Interrupt 1 sperren
 286:	8b b7       	in	r24, 0x3b	; 59
 288:	8f 77       	andi	r24, 0x7F	; 127
 28a:	8b bf       	out	0x3b, r24	; 59
#endif
//  StopSwitch ();
}
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_14>:

  \par  Beispiel:
  (Nicht vorhanden)
*****************************************************************************/
SIGNAL (SIG_ADC)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
  if (AdcIntFunc)
 2bc:	80 91 6c 00 	lds	r24, 0x006C
 2c0:	90 91 6d 00 	lds	r25, 0x006D
 2c4:	89 2b       	or	r24, r25
 2c6:	29 f0       	breq	.+10     	; 0x2d2 <__vector_14+0x38>
    AdcIntFunc();
 2c8:	e0 91 6c 00 	lds	r30, 0x006C
 2cc:	f0 91 6d 00 	lds	r31, 0x006D
 2d0:	09 95       	icall
}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <Init>:
  TCCR2B = _BV(CS20);
  // interrupt on timer overflow
  TIMSK2 |= _BV(TOIE2); 
#else
  // fast PWM, set OC2A on compare match, clear OC2A at bottom, clk/1
  TCCR2 = _BV(WGM20) | _BV(WGM21) | _BV(COM20) | _BV(COM21) | _BV(CS20);
 2f4:	89 e7       	ldi	r24, 0x79	; 121
 2f6:	85 bd       	out	0x25, r24	; 37
  // interrupt on timer overflow
  TIMSK |= _BV(TOIE2); 
 2f8:	89 b7       	in	r24, 0x39	; 57
 2fa:	80 64       	ori	r24, 0x40	; 64
 2fc:	89 bf       	out	0x39, r24	; 57
#endif
  // 36kHz carrier/timer
  OCR2  = 0x91;
 2fe:	81 e9       	ldi	r24, 0x91	; 145
 300:	83 bd       	out	0x23, r24	; 35
   UBRR0L = (uint8_t)(F_CPU/(BAUD_RATE*16L)-1);
   UBRR0H = (F_CPU/(BAUD_RATE*16L)-1) >> 8;
   UCSR0B = (1<<RXEN0) | (1<<TXEN0);
   UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
#else
  UBRRH = (((F_CPU/BAUD_RATE)/16)-1)>>8; 	// set baud rate
 302:	10 bc       	out	0x20, r1	; 32
  UBRRL = (((F_CPU/BAUD_RATE)/16)-1);
 304:	8f ec       	ldi	r24, 0xCF	; 207
 306:	89 b9       	out	0x09, r24	; 9
  UCSRB = (1<<RXEN)|(1<<TXEN);  // enable Rx & Tx
 308:	88 e1       	ldi	r24, 0x18	; 24
 30a:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);  // config USART; 8N1
 30c:	96 e8       	ldi	r25, 0x86	; 134
 30e:	90 bd       	out	0x20, r25	; 32
    Port B: Seriell Senden; Richtungsvorgabe Motor links; Takt fuer die
            Geschwindigkeit beider Motoren; Grueneanteil-Status-LED
    Port D: Richtungsvorgabe Motor rechts; Vordere LED;
            Odometrie-LED (Radsensor); Rotanteil-Status-LED
  */
  DDRB = IRTX | RIGHT_DIR | PWM | GREEN_LED;
 310:	8f e3       	ldi	r24, 0x3F	; 63
 312:	87 bb       	out	0x17, r24	; 23
  DDRD = LEFT_DIR | FRONT_LED | ODOMETRIE_LED | RED_LED;
 314:	84 ef       	ldi	r24, 0xF4	; 244
 316:	81 bb       	out	0x11, r24	; 17

  /*
    PWM-Kanaele OC1A und OC1B auf 8-Bit einstellen.
    Sie werden fuer die Geschwindigkeitsvorgaben der Motoren benutzt.
  */
  TCCR1A = _BV(WGM10) | _BV(COM1A1) | _BV(COM1B1);
 318:	81 ea       	ldi	r24, 0xA1	; 161
 31a:	8f bd       	out	0x2f, r24	; 47
  TCCR1B = _BV(CS11);                 // tmr1-Timer mit MCU-Takt/8 betreiben.
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	8e bd       	out	0x2e, r24	; 46

  /*
    Einstellungen des A/D-Wandlers auf MCU-Takt/64
  */
  ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1);
 320:	96 b9       	out	0x06, r25	; 6
    Sonstige Vorbereitungen.
    - Alle LED's ausschalten
    - Motoren stoppen und schon mal auf Vorwaerts einstellen.
    - Globale Variable autoencoder ausschalten.
  */
  ODOMETRIE_LED_OFF;
 322:	97 98       	cbi	0x12, 7	; 18
  FrontLED (OFF);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	a8 d0       	rcall	.+336    	; 0x478 <FrontLED>
  BackLED (ON, ON);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	ae d0       	rcall	.+348    	; 0x48a <BackLED>
  BackLED (OFF, OFF);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	ab d0       	rcall	.+342    	; 0x48a <BackLED>
  StatusLED (GREEN);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	8d d0       	rcall	.+282    	; 0x452 <StatusLED>

  MotorDir (FWD, FWD);
 338:	80 e2       	ldi	r24, 0x20	; 32
 33a:	60 e2       	ldi	r22, 0x20	; 32
 33c:	e5 d0       	rcall	.+458    	; 0x508 <MotorDir>
  MotorSpeed (0, 0);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	db d0       	rcall	.+438    	; 0x4fa <MotorSpeed>

  autoencode = FALSE;
 344:	10 92 6f 00 	sts	0x006F, r1
 348:	10 92 6e 00 	sts	0x006E, r1

  Ovr2IntFunc = 0;
 34c:	10 92 76 00 	sts	0x0076, r1
 350:	10 92 75 00 	sts	0x0075, r1
  AdcIntFunc = 0;
 354:	10 92 6d 00 	sts	0x006D, r1
 358:	10 92 6c 00 	sts	0x006C, r1
  /*
    Funktion zum ALLGEMEINEN ZULASSEN von Interrupts.
  */
  sei ();
 35c:	78 94       	sei
}
 35e:	08 95       	ret

00000360 <OdometryData>:
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	8c 01       	movw	r16, r24
 36a:	e0 90 6e 00 	lds	r14, 0x006E
 36e:	f0 90 6f 00 	lds	r15, 0x006F
 372:	10 92 6f 00 	sts	0x006F, r1
 376:	10 92 6e 00 	sts	0x006E, r1
 37a:	84 b3       	in	r24, 0x14	; 20
 37c:	8c 7f       	andi	r24, 0xFC	; 252
 37e:	84 bb       	out	0x14, r24	; 20
 380:	97 9a       	sbi	0x12, 7	; 18
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	50 d0       	rcall	.+160    	; 0x42c <ReadADC>
 38c:	f8 01       	movw	r30, r16
 38e:	91 83       	std	Z+1, r25	; 0x01
 390:	80 83       	st	Z, r24
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	48 d0       	rcall	.+144    	; 0x42c <ReadADC>
 39c:	f8 01       	movw	r30, r16
 39e:	93 83       	std	Z+3, r25	; 0x03
 3a0:	82 83       	std	Z+2, r24	; 0x02
 3a2:	f0 92 6f 00 	sts	0x006F, r15
 3a6:	e0 92 6e 00 	sts	0x006E, r14
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	08 95       	ret

000003b4 <LineData>:
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	8c 01       	movw	r16, r24
 3be:	e0 90 6e 00 	lds	r14, 0x006E
 3c2:	f0 90 6f 00 	lds	r15, 0x006F
 3c6:	10 92 6f 00 	sts	0x006F, r1
 3ca:	10 92 6e 00 	sts	0x006E, r1
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	2a d0       	rcall	.+84     	; 0x42c <ReadADC>
 3d8:	f8 01       	movw	r30, r16
 3da:	91 83       	std	Z+1, r25	; 0x01
 3dc:	80 83       	st	Z, r24
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	22 d0       	rcall	.+68     	; 0x42c <ReadADC>
 3e8:	f8 01       	movw	r30, r16
 3ea:	93 83       	std	Z+3, r25	; 0x03
 3ec:	82 83       	std	Z+2, r24	; 0x02
 3ee:	f0 92 6f 00 	sts	0x006F, r15
 3f2:	e0 92 6e 00 	sts	0x006E, r14
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	08 95       	ret

00000400 <Battery>:
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	00 91 6e 00 	lds	r16, 0x006E
 408:	10 91 6f 00 	lds	r17, 0x006F
 40c:	10 92 6f 00 	sts	0x006F, r1
 410:	10 92 6e 00 	sts	0x006E, r1
 414:	6a e0       	ldi	r22, 0x0A	; 10
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	85 e0       	ldi	r24, 0x05	; 5
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	07 d0       	rcall	.+14     	; 0x42c <ReadADC>
 41e:	10 93 6f 00 	sts	0x006F, r17
 422:	00 93 6e 00 	sts	0x006E, r16
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

0000042c <ReadADC>:
 42c:	85 30       	cpi	r24, 0x05	; 5
 42e:	91 05       	cpc	r25, r1
 430:	11 f4       	brne	.+4      	; 0x436 <ReadADC+0xa>
 432:	85 ec       	ldi	r24, 0xC5	; 197
 434:	01 c0       	rjmp	.+2      	; 0x438 <ReadADC+0xc>
 436:	80 64       	ori	r24, 0x40	; 64
 438:	87 b9       	out	0x07, r24	; 7
 43a:	61 15       	cp	r22, r1
 43c:	71 05       	cpc	r23, r1
 43e:	11 f0       	breq	.+4      	; 0x444 <ReadADC+0x18>
 440:	86 2f       	mov	r24, r22
 442:	85 d0       	rcall	.+266    	; 0x54e <Sleep>
 444:	36 9a       	sbi	0x06, 6	; 6
 446:	34 9b       	sbis	0x06, 4	; 6
 448:	fe cf       	rjmp	.-4      	; 0x446 <ReadADC+0x1a>
 44a:	34 9a       	sbi	0x06, 4	; 6
 44c:	84 b1       	in	r24, 0x04	; 4
 44e:	95 b1       	in	r25, 0x05	; 5
 450:	08 95       	ret

00000452 <StatusLED>:
 452:	88 23       	and	r24, r24
 454:	11 f4       	brne	.+4      	; 0x45a <StatusLED+0x8>
 456:	c0 98       	cbi	0x18, 0	; 24
 458:	03 c0       	rjmp	.+6      	; 0x460 <__stack+0x1>
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	19 f4       	brne	.+6      	; 0x464 <__stack+0x5>
 45e:	c0 9a       	sbi	0x18, 0	; 24
 460:	92 98       	cbi	0x12, 2	; 18
 462:	08 95       	ret
 464:	83 30       	cpi	r24, 0x03	; 3
 466:	19 f4       	brne	.+6      	; 0x46e <__stack+0xf>
 468:	c0 9a       	sbi	0x18, 0	; 24
 46a:	92 9a       	sbi	0x12, 2	; 18
 46c:	08 95       	ret
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	11 f4       	brne	.+4      	; 0x476 <__stack+0x17>
 472:	c0 98       	cbi	0x18, 0	; 24
 474:	92 9a       	sbi	0x12, 2	; 18
 476:	08 95       	ret

00000478 <FrontLED>:
 478:	92 b3       	in	r25, 0x12	; 18
 47a:	82 95       	swap	r24
 47c:	88 0f       	add	r24, r24
 47e:	88 0f       	add	r24, r24
 480:	80 7c       	andi	r24, 0xC0	; 192
 482:	9f 7b       	andi	r25, 0xBF	; 191
 484:	98 2b       	or	r25, r24
 486:	92 bb       	out	0x12, r25	; 18
 488:	08 95       	ret

0000048a <BackLED>:
 48a:	98 2f       	mov	r25, r24
 48c:	88 23       	and	r24, r24
 48e:	11 f4       	brne	.+4      	; 0x494 <BackLED+0xa>
 490:	66 23       	and	r22, r22
 492:	49 f0       	breq	.+18     	; 0x4a6 <BackLED+0x1c>
 494:	97 98       	cbi	0x12, 7	; 18
 496:	84 b3       	in	r24, 0x14	; 20
 498:	83 60       	ori	r24, 0x03	; 3
 49a:	84 bb       	out	0x14, r24	; 20
 49c:	85 b3       	in	r24, 0x15	; 21
 49e:	83 60       	ori	r24, 0x03	; 3
 4a0:	85 bb       	out	0x15, r24	; 21
 4a2:	99 23       	and	r25, r25
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <BackLED+0x1e>
 4a6:	a9 98       	cbi	0x15, 1	; 21
 4a8:	66 23       	and	r22, r22
 4aa:	09 f4       	brne	.+2      	; 0x4ae <BackLED+0x24>
 4ac:	a8 98       	cbi	0x15, 0	; 21
 4ae:	08 95       	ret

000004b0 <SetMotorPower>:
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	08 2f       	mov	r16, r24
 4b6:	16 2f       	mov	r17, r22
 4b8:	87 ff       	sbrs	r24, 7
 4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <SetMotorPower+0x12>
 4bc:	01 95       	neg	r16
 4be:	80 e1       	ldi	r24, 0x10	; 16
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <SetMotorPower+0x1c>
 4c2:	88 23       	and	r24, r24
 4c4:	11 f4       	brne	.+4      	; 0x4ca <SetMotorPower+0x1a>
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	01 c0       	rjmp	.+2      	; 0x4cc <SetMotorPower+0x1c>
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	17 ff       	sbrs	r17, 7
 4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <SetMotorPower+0x26>
 4d0:	11 95       	neg	r17
 4d2:	60 e1       	ldi	r22, 0x10	; 16
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <SetMotorPower+0x30>
 4d6:	11 23       	and	r17, r17
 4d8:	11 f4       	brne	.+4      	; 0x4de <SetMotorPower+0x2e>
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <SetMotorPower+0x30>
 4de:	60 e2       	ldi	r22, 0x20	; 32
 4e0:	13 d0       	rcall	.+38     	; 0x508 <MotorDir>
 4e2:	61 2f       	mov	r22, r17
 4e4:	77 27       	eor	r23, r23
 4e6:	67 fd       	sbrc	r22, 7
 4e8:	70 95       	com	r23
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	80 2f       	mov	r24, r16
 4f0:	88 0f       	add	r24, r24
 4f2:	03 d0       	rcall	.+6      	; 0x4fa <MotorSpeed>
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <MotorSpeed>:
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	9b bd       	out	0x2b, r25	; 43
 4fe:	8a bd       	out	0x2a, r24	; 42
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	79 bd       	out	0x29, r23	; 41
 504:	68 bd       	out	0x28, r22	; 40
 506:	08 95       	ret

00000508 <MotorDir>:
 508:	92 b3       	in	r25, 0x12	; 18
 50a:	9f 7c       	andi	r25, 0xCF	; 207
 50c:	98 2b       	or	r25, r24
 50e:	92 bb       	out	0x12, r25	; 18
 510:	88 b3       	in	r24, 0x18	; 24
 512:	8f 7c       	andi	r24, 0xCF	; 207
 514:	86 2b       	or	r24, r22
 516:	88 bb       	out	0x18, r24	; 24
 518:	08 95       	ret

0000051a <Gettime>:
 51a:	60 91 77 00 	lds	r22, 0x0077
 51e:	70 91 78 00 	lds	r23, 0x0078
 522:	80 91 79 00 	lds	r24, 0x0079
 526:	90 91 7a 00 	lds	r25, 0x007A
 52a:	20 91 74 00 	lds	r18, 0x0074
 52e:	98 2f       	mov	r25, r24
 530:	87 2f       	mov	r24, r23
 532:	76 2f       	mov	r23, r22
 534:	66 27       	eor	r22, r22
 536:	62 0f       	add	r22, r18
 538:	71 1d       	adc	r23, r1
 53a:	81 1d       	adc	r24, r1
 53c:	91 1d       	adc	r25, r1
 53e:	24 e2       	ldi	r18, 0x24	; 36
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	1c d0       	rcall	.+56     	; 0x580 <__udivmodsi4>
 548:	ca 01       	movw	r24, r20
 54a:	b9 01       	movw	r22, r18
 54c:	08 95       	ret

0000054e <Sleep>:
 54e:	90 91 74 00 	lds	r25, 0x0074
 552:	98 0f       	add	r25, r24
 554:	80 91 74 00 	lds	r24, 0x0074
 558:	89 17       	cp	r24, r25
 55a:	e1 f7       	brne	.-8      	; 0x554 <Sleep+0x6>
 55c:	08 95       	ret

0000055e <Msleep>:
 55e:	bc 01       	movw	r22, r24
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	50 e0       	ldi	r21, 0x00	; 0
 564:	09 c0       	rjmp	.+18     	; 0x578 <Msleep+0x1a>
 566:	20 91 74 00 	lds	r18, 0x0074
 56a:	2c 5d       	subi	r18, 0xDC	; 220
 56c:	80 91 74 00 	lds	r24, 0x0074
 570:	82 17       	cp	r24, r18
 572:	e1 f7       	brne	.-8      	; 0x56c <Msleep+0xe>
 574:	4f 5f       	subi	r20, 0xFF	; 255
 576:	5f 4f       	sbci	r21, 0xFF	; 255
 578:	46 17       	cp	r20, r22
 57a:	57 07       	cpc	r21, r23
 57c:	a4 f3       	brlt	.-24     	; 0x566 <Msleep+0x8>
 57e:	08 95       	ret

00000580 <__udivmodsi4>:
 580:	a1 e2       	ldi	r26, 0x21	; 33
 582:	1a 2e       	mov	r1, r26
 584:	aa 1b       	sub	r26, r26
 586:	bb 1b       	sub	r27, r27
 588:	fd 01       	movw	r30, r26
 58a:	0d c0       	rjmp	.+26     	; 0x5a6 <__udivmodsi4_ep>

0000058c <__udivmodsi4_loop>:
 58c:	aa 1f       	adc	r26, r26
 58e:	bb 1f       	adc	r27, r27
 590:	ee 1f       	adc	r30, r30
 592:	ff 1f       	adc	r31, r31
 594:	a2 17       	cp	r26, r18
 596:	b3 07       	cpc	r27, r19
 598:	e4 07       	cpc	r30, r20
 59a:	f5 07       	cpc	r31, r21
 59c:	20 f0       	brcs	.+8      	; 0x5a6 <__udivmodsi4_ep>
 59e:	a2 1b       	sub	r26, r18
 5a0:	b3 0b       	sbc	r27, r19
 5a2:	e4 0b       	sbc	r30, r20
 5a4:	f5 0b       	sbc	r31, r21

000005a6 <__udivmodsi4_ep>:
 5a6:	66 1f       	adc	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	1a 94       	dec	r1
 5b0:	69 f7       	brne	.-38     	; 0x58c <__udivmodsi4_loop>
 5b2:	60 95       	com	r22
 5b4:	70 95       	com	r23
 5b6:	80 95       	com	r24
 5b8:	90 95       	com	r25
 5ba:	9b 01       	movw	r18, r22
 5bc:	ac 01       	movw	r20, r24
 5be:	bd 01       	movw	r22, r26
 5c0:	cf 01       	movw	r24, r30
 5c2:	08 95       	ret

000005c4 <_exit>:
 5c4:	f8 94       	cli

000005c6 <__stop_program>:
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <__stop_program>
